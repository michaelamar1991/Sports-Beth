{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst ethereumOverloads = __importStar(require(\"./ethereum-overloads\"));\n\nconst quorumOverloads = __importStar(require(\"./quorum-overloads\"));\n\n; // March 14, 2019 - Mike Seese:\n// This shim was intended to be temporary (see the above comment)\n// with the idea of a more robust implementation. That implementation\n// would essentially take this shim and include it under the\n// ethereum/apis/web3 (or something like that) structure.\n// I chose to extend/inherit web3 here to keep scope minimal for\n// getting web3 to behave with Quorum and AxCore (future/concurrent PR).\n// I wanted to do as little changing to the original Truffle codebase, and\n// for it to still expect a web3 instance. Otherwise, the scope of these\n// quick support work would be high. The \"Web3Shim\" is a shim for only\n// web3.js, and it was not intended to serve as the general purpose\n// truffle <=> all DLTs adapter. We have other commitments currently that\n// should drive the development of the correct architecture of\n// `truffle-interface-adapter`that should use this work in a more\n// sane and organized manner.\n\nclass Web3Shim extends web3_1.default {\n  constructor(options) {\n    super();\n\n    if (options) {\n      this.networkType = options.networkType || \"ethereum\";\n\n      if (options.provider) {\n        this.setProvider(options.provider);\n      }\n    } else {\n      this.networkType = \"ethereum\";\n    }\n\n    this.initInterface();\n  }\n\n  setNetworkType(networkType) {\n    this.networkType = networkType;\n    this.initInterface();\n  }\n\n  initInterface() {\n    switch (this.networkType) {\n      case \"quorum\":\n        {\n          this.initQuorum();\n          break;\n        }\n\n      case \"ethereum\":\n      default:\n        {\n          this.initEthereum();\n          break;\n        }\n    }\n  }\n\n  initEthereum() {\n    // truffle has started expecting gas used/limit to be\n    // hex strings to support bignumbers for other ledgers\n    ethereumOverloads.getBlock(this);\n    ethereumOverloads.getTransaction(this);\n    ethereumOverloads.getTransactionReceipt(this);\n  }\n\n  initQuorum() {\n    // duck punch some of web3's output formatters\n    quorumOverloads.getBlock(this);\n    quorumOverloads.getTransaction(this);\n    quorumOverloads.getTransactionReceipt(this);\n  }\n\n}\n\nexports.Web3Shim = Web3Shim;","map":null,"metadata":{},"sourceType":"script"}