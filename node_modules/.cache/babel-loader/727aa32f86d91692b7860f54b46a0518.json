{"ast":null,"code":"/**\n * Methods to fetch and decode reason string from ganache when a tx errors.\n */\nconst reason = {\n  /**\n   * Extracts a reason string from `eth_call` response\n   * @param  {Object}           res  response from `eth_call` to extract reason\n   * @param  {Web3}             web3 a helpful friend\n   * @return {String|Undefined}      decoded reason string\n   */\n  _extract: function (res, web3) {\n    if (!res || !res.error && !res.result) return;\n    const errorStringHash = '0x08c379a0';\n    const isObject = res && typeof res === 'object' && res.error && res.error.data;\n    const isString = res && typeof res === 'object' && typeof res.result === 'string';\n\n    if (isObject) {\n      const data = res.error.data;\n      const hash = Object.keys(data)[0];\n\n      if (data[hash].return && data[hash].return.includes(errorStringHash)) {\n        return web3.eth.abi.decodeParameter('string', data[hash].return.slice(10));\n      }\n    } else if (isString && res.result.includes(errorStringHash)) {\n      return web3.eth.abi.decodeParameter('string', res.result.slice(10));\n    }\n  },\n\n  /**\n   * Runs tx via `eth_call` and resolves a reason string if it exists on the response.\n   * @param  {Object} web3\n   * @return {String|Undefined}\n   */\n  get: function (params, web3) {\n    const packet = {\n      jsonrpc: '2.0',\n      method: 'eth_call',\n      params: [params, 'latest'],\n      id: new Date().getTime()\n    };\n    return new Promise(resolve => {\n      web3.currentProvider.send(packet, (err, response) => {\n        const reasonString = reason._extract(response, web3);\n\n        resolve(reasonString);\n      });\n    });\n  }\n};\nmodule.exports = reason;","map":null,"metadata":{},"sourceType":"script"}