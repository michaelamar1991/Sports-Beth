{"ast":null,"code":"import Web3 from 'web3';\nlet getWeb3 = new Promise(function (resolve, reject) {\n  // Wait for loading completion before loading web3, to be sure it's\n  // already injected\n  window.addEventListener('load', function () {\n    var results;\n    var web3 = window.web3; // Checking if Web3 has been injected by the browser MetaMask\n\n    if (typeof web3 !== 'undefined') {\n      // Use MetaMask's provider.\n      web3 = new Web3(web3.currentProvider);\n      results = {\n        web3: web3\n      };\n      console.log('Injected web3 detected.');\n      resolve(results);\n    } else {\n      // If no web3 is detected, then the local web3 provider is loaded.\n      var provider = new Web3.providers.HttpProvider('http://127.0.0.1:9545');\n      web3 = new Web3(provider);\n      results = {\n        web3: web3\n      };\n      console.log('No web3 instance injected, using Local web3.');\n      resolve(results);\n    }\n  });\n});\nexport default getWeb3;","map":{"version":3,"sources":["/Users/michaelamar/Desktop/BlockchainProject/eth/src/utils/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","results","web3","currentProvider","console","log","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAClD;AACA;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAW;AACzC,QAAIC,OAAJ;AACA,QAAIC,IAAI,GAAGH,MAAM,CAACG,IAAlB,CAFyC,CAGzC;;AACA,QAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACAA,MAAAA,IAAI,GAAG,IAAIR,IAAJ,CAASQ,IAAI,CAACC,eAAd,CAAP;AACNF,MAAAA,OAAO,GAAG;AACFC,QAAAA,IAAI,EAAEA;AADJ,OAAV;AAGME,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAR,MAAAA,OAAO,CAACI,OAAD,CAAP;AACD,KARD,MAQO;AACL;AACA,UAAIK,QAAQ,GAAG,IAAIZ,IAAI,CAACa,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAf;AACAN,MAAAA,IAAI,GAAG,IAAIR,IAAJ,CAASY,QAAT,CAAP;AACAL,MAAAA,OAAO,GAAG;AACRC,QAAAA,IAAI,EAAEA;AADE,OAAV;AAGAE,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAR,MAAAA,OAAO,CAACI,OAAD,CAAP;AACD;AACF,GAtBD;AAuBD,CA1Ba,CAAd;AA2BA,eAAeN,OAAf","sourcesContent":["import Web3 from 'web3'\n\nlet getWeb3 = new Promise(function(resolve, reject) {\n  // Wait for loading completion before loading web3, to be sure it's\n  // already injected\n  window.addEventListener('load', function() {\n    var results\n    var web3 = window.web3\n    // Checking if Web3 has been injected by the browser MetaMask\n    if (typeof web3 !== 'undefined') {\n      // Use MetaMask's provider.\n      web3 = new Web3(web3.currentProvider)\nresults = {\n        web3: web3\n      }\n      console.log('Injected web3 detected.');\n      resolve(results)\n    } else {\n      // If no web3 is detected, then the local web3 provider is loaded.\n      var provider = new Web3.providers.HttpProvider('http://127.0.0.1:9545')\n      web3 = new Web3(provider)\n      results = {\n        web3: web3\n      }\n      console.log('No web3 instance injected, using Local web3.');\n      resolve(results)\n    }\n  })\n})\nexport default getWeb3"]},"metadata":{},"sourceType":"module"}