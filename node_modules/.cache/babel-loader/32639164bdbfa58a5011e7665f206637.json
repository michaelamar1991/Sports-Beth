{"ast":null,"code":"var _jsxFileName = \"/Users/michaelamar/Desktop/BlockchainProject/eth/src/TeamA.jsx\";\nimport React, { Component } from 'react';\nimport getWeb3 from './utils/getWeb3.js';\nimport BettingContract from './contracts/Betting.json';\nimport './App.css';\n\nclass TeamA extends Component {\n  constructor() {\n    super();\n    this.state = {\n      web3: '',\n      Amount: '',\n      InputAmount: '',\n      weiConversion: 1000000000000000000\n    };\n    this.getAmount = this.getAmount.bind(this);\n    this.Bet = this.Bet.bind(this);\n    this.MakeWin = this.MakeWin.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount() {\n    getWeb3.then(results => {\n      /*After getting web3, we save the informations of the web3 user by\n      editing the state variables of the component */\n      results.web3.eth.getAccounts((error, acc) => {\n        //this.setState is used to edit the state variables\n        this.setState({\n          web3: results.web3\n        });\n      }); //At the end of the first promise, we return the loaded web3\n\n      return results.web3;\n    }).then(results => {\n      //In the next promise, we pass web3 (in results) to the getAmount function\n      this.getAmount(results);\n    }).catch(() => {\n      //If no web3 provider was found, log it in the console\n      console.log('Error finding web3.');\n    });\n  }\n\n  getAmount(web3) {\n    //Get the contract\n    const contract = require('truffle-contract');\n\n    const Betting = contract(BettingContract);\n    Betting.setProvider(web3.currentProvider);\n    var BettingInstance;\n    web3.eth.getAccounts((error, accounts) => {\n      Betting.deployed().then(instance => {\n        //Instantiate the contract in a promise\n        BettingInstance = instance;\n      }).then(result => {\n        //Calling the AmountOne function of the smart-contract\n        return BettingInstance.AmountOne.call({\n          from: accounts[0]\n        });\n      }).then(result => {\n        //Then the value returned is stored in the Amount state var.\n        //Divided by 10000 to convert in ether.\n        this.setState({\n          Amount: 20000000000 / 10000\n        });\n      });\n    });\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      InputAmount: e.target.value * this.state.weiConversion\n    });\n  }\n\n  Bet() {\n    const contract = require('truffle-contract');\n\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n      Betting.deployed().then(instance => {\n        BettingInstance = instance;\n      }).then(result => {\n        // Get the value from the contract to prove it worked.\n        return BettingInstance.bet(1, {\n          from: accounts[0],\n          value: this.state.InputAmount\n        });\n      }).catch(() => {\n        console.log(\"Error with betting\");\n      });\n    });\n  }\n\n  MakeWin() {\n    const contract = require('truffle-contract');\n\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n      Betting.deployed().then(instance => {\n        BettingInstance = instance;\n      }).then(result => {\n        return BettingInstance.distributePrizes(1, {\n          from: accounts[0]\n        });\n      }).catch(() => {\n        console.log(\"Error with distributing prizes\");\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Team A\"), console.log(this.state), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \" Total amount : \", this.state.Amount, \" ETH\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \" Enter an amount to bet\"), React.createElement(\"div\", {\n      className: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      onChange: this.handleInputChange,\n      required: true,\n      pattern: \"[0-9]*[.,][0-9]*\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"input-group-addon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"ETH\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.Bet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Bet\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.MakeWin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \" Make this team win\"));\n  }\n\n}\n\nexport default TeamA;","map":{"version":3,"sources":["/Users/michaelamar/Desktop/BlockchainProject/eth/src/TeamA.jsx"],"names":["React","Component","getWeb3","BettingContract","TeamA","constructor","state","web3","Amount","InputAmount","weiConversion","getAmount","bind","Bet","MakeWin","handleInputChange","componentDidMount","then","results","eth","getAccounts","error","acc","setState","catch","console","log","contract","require","Betting","setProvider","currentProvider","BettingInstance","accounts","deployed","instance","result","AmountOne","call","from","e","target","value","bet","distributePrizes","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport getWeb3 from './utils/getWeb3.js';\nimport BettingContract from './contracts/Betting.json';\nimport './App.css';\n\n\n\nclass TeamA extends Component {\n  constructor(){\n    super();\n    this.state={\n      web3: '',\n      Amount: '',\n      InputAmount: '',\n      weiConversion : 1000000000000000000\n    }\n\n    this.getAmount = this.getAmount.bind(this);\n    this.Bet = this.Bet.bind(this);\n    this.MakeWin = this.MakeWin.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount(){\n    getWeb3.then(results => {\n      /*After getting web3, we save the informations of the web3 user by\n      editing the state variables of the component */\n      results.web3.eth.getAccounts( (error,acc) => {\n        //this.setState is used to edit the state variables\n        this.setState({\n          web3: results.web3\n        })\n      });\n      //At the end of the first promise, we return the loaded web3\n      return results.web3\n    }).then(results => {\n      //In the next promise, we pass web3 (in results) to the getAmount function\n      this.getAmount(results)\n    }).catch( () => {\n      //If no web3 provider was found, log it in the console\n      console.log('Error finding web3.')\n    })\n  }\n\n\n\n  getAmount(web3){\n    //Get the contract\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(web3.currentProvider);\n    var BettingInstance;\n    web3.eth.getAccounts((error, accounts) => {\n    Betting.deployed().then((instance) => {\n\n      //Instantiate the contract in a promise\n      BettingInstance = instance\n\n    }).then((result) => {\n      //Calling the AmountOne function of the smart-contract\n      return BettingInstance.AmountOne.call({from: accounts[0]})\n    }).then((result) => {\n      //Then the value returned is stored in the Amount state var.\n      //Divided by 10000 to convert in ether.\n      this.setState({\n        Amount : 20000000000 / 10000\n      })\n    });\n  })\n  }\n\n  handleInputChange(e) {\n    this.setState({InputAmount: e.target.value*this.state.weiConversion});\n  }\n\n  Bet(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          // Get the value from the contract to prove it worked.\n          return BettingInstance.bet(1, {from: accounts[0],\n          value: this.state.InputAmount})\n        }).catch(() => {\n          console.log(\"Error with betting\")\n        })\n      })\n  }\n\n  MakeWin(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          return BettingInstance.distributePrizes(1, {from: accounts[0]})\n        }).catch(() => {\n          console.log(\"Error with distributing prizes\")\n        })\n      })\n  }\n\n\n\n\n  render(){\n        return(\n          <div>\n            <h3>Team A</h3>\n            {console.log(this.state)}\n            <h4> Total amount : {this.state.Amount} ETH</h4>\n            <hr/>\n            <h5> Enter an amount to bet</h5>\n            <div className=\"input-group\">\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleInputChange} required pattern=\"[0-9]*[.,][0-9]*\"/>\n                    <span className=\"input-group-addon\">ETH</span>\n            </div>\n            <br/>\n            <button onClick={this.Bet}>Bet</button>\n            <br/>\n            <hr/>\n            <button onClick={this.MakeWin}> Make this team win</button>\n          </div>\n        )\n\n    }\n\n\n\n}\n\nexport default TeamA;"]},"metadata":{},"sourceType":"module"}