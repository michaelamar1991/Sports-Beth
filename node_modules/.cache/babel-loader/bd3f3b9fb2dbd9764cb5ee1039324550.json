{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bn_js_1 = __importDefault(require(\"bn.js\")); // The ts-ignores are ignoring the checks that are\n// saying that web3.eth.getBlock is a function and doesn't\n// have a `method` property, which it does\n\n\nfunction getBlock(web3) {\n  // @ts-ignore\n  const _oldFormatter = web3.eth.getBlock.method.outputFormatter; // @ts-ignore\n\n  web3.eth.getBlock.method.outputFormatter = block => {\n    // @ts-ignore\n    let result = _oldFormatter.call(web3.eth.getBlock.method, block); // Perhaps there is a better method of doing this,\n    // but the raw hexstrings work for the time being\n\n\n    result.gasLimit = \"0x\" + new bn_js_1.default(result.gasLimit).toString(16);\n    result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n    return result;\n  };\n}\n\nexports.getBlock = getBlock;\n;\n\nfunction getTransaction(web3) {\n  const _oldTransactionFormatter = // @ts-ignore\n  web3.eth.getTransaction.method.outputFormatter; // @ts-ignore\n\n  web3.eth.getTransaction.method.outputFormatter = tx => {\n    let result = _oldTransactionFormatter.call( // @ts-ignore\n    web3.eth.getTransaction.method, tx); // Perhaps there is a better method of doing this,\n    // but the raw hexstrings work for the time being\n\n\n    result.gas = \"0x\" + new bn_js_1.default(result.gas).toString(16);\n    return result;\n  };\n}\n\nexports.getTransaction = getTransaction;\n;\n\nfunction getTransactionReceipt(web3) {\n  const _oldTransactionReceiptFormatter = // @ts-ignore\n  web3.eth.getTransactionReceipt.method.outputFormatter; // @ts-ignore\n\n  web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {\n    let result = _oldTransactionReceiptFormatter.call( // @ts-ignore\n    web3.eth.getTransactionReceipt.method, receipt); // Perhaps there is a better method of doing this,\n    // but the raw hexstrings work for the time being\n\n\n    result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n    return result;\n  };\n}\n\nexports.getTransactionReceipt = getTransactionReceipt;\n;","map":null,"metadata":{},"sourceType":"script"}