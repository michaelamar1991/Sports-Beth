{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bn_js_1 = __importDefault(require(\"bn.js\")); // The ts-ignores are ignoring the checks that are\n// saying that web3.eth.getBlock is a function and doesn't\n// have a `method` property, which it does\n\n\nfunction getBlock(web3) {\n  // @ts-ignore\n  const _oldBlockFormatter = web3.eth.getBlock.method.outputFormatter; // @ts-ignore\n\n  web3.eth.getBlock.method.outputFormatter = block => {\n    const _oldTimestamp = block.timestamp;\n    const _oldGasLimit = block.gasLimit;\n    const _oldGasUsed = block.gasUsed; // Quorum uses nanoseconds instead of seconds in timestamp\n\n    let timestamp = new bn_js_1.default(block.timestamp.slice(2), 16);\n    timestamp = timestamp.div(new bn_js_1.default(10).pow(new bn_js_1.default(9)));\n    block.timestamp = \"0x\" + timestamp.toString(16); // Since we're overwriting the gasLimit/Used later,\n    // it doesn't matter what it is before the call\n    // The same applies to the timestamp, but I reduced\n    // the precision since there was an accurate representation\n    // We do this because Quorum can have large block/transaction\n    // gas limits\n\n    block.gasLimit = \"0x0\";\n    block.gasUsed = \"0x0\"; // @ts-ignore\n\n    let result = _oldBlockFormatter.call(web3.eth.getBlock.method, block); // Perhaps there is a better method of doing this,\n    // but the raw hexstrings work for the time being\n\n\n    result.timestamp = _oldTimestamp;\n    result.gasLimit = _oldGasLimit;\n    result.gasUsed = _oldGasUsed;\n    return result;\n  };\n}\n\nexports.getBlock = getBlock;\n;\n\nfunction getTransaction(web3) {\n  const _oldTransactionFormatter = // @ts-ignore\n  web3.eth.getTransaction.method.outputFormatter; // @ts-ignore\n\n  web3.eth.getTransaction.method.outputFormatter = tx => {\n    const _oldGas = tx.gas;\n    tx.gas = \"0x0\";\n\n    let result = _oldTransactionFormatter.call( // @ts-ignore\n    web3.eth.getTransaction.method, tx); // Perhaps there is a better method of doing this,\n    // but the raw hexstrings work for the time being\n\n\n    result.gas = _oldGas;\n    return result;\n  };\n}\n\nexports.getTransaction = getTransaction;\n;\n\nfunction getTransactionReceipt(web3) {\n  const _oldTransactionReceiptFormatter = // @ts-ignore\n  web3.eth.getTransactionReceipt.method.outputFormatter; // @ts-ignore\n\n  web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {\n    const _oldGasUsed = receipt.gasUsed;\n    receipt.gasUsed = \"0x0\";\n\n    let result = _oldTransactionReceiptFormatter.call( // @ts-ignore\n    web3.eth.getTransactionReceipt.method, receipt); // Perhaps there is a better method of doing this,\n    // but the raw hexstrings work for the time being\n\n\n    result.gasUsed = _oldGasUsed;\n    return result;\n  };\n}\n\nexports.getTransactionReceipt = getTransactionReceipt;\n;","map":null,"metadata":{},"sourceType":"script"}