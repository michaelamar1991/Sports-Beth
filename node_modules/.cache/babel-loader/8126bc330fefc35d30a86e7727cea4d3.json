{"ast":null,"code":"const debug = require(\"debug\")(\"contract:execute\"); // eslint-disable-line no-unused-vars\n\n\nvar Web3PromiEvent = require(\"web3-core-promievent\");\n\nvar EventEmitter = require(\"events\");\n\nvar utils = require(\"./utils\");\n\nvar StatusError = require(\"./statuserror\");\n\nvar Reason = require(\"./reason\");\n\nvar handlers = require(\"./handlers\");\n\nvar override = require(\"./override\");\n\nvar reformat = require(\"./reformat\");\n\nvar execute = {\n  // -----------------------------------  Helpers --------------------------------------------------\n\n  /**\n   * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.\n   * @param  {Object} params     `sendTransaction` parameters\n   * @param  {Number} blockLimit  most recent network block.blockLimit\n   * @return {Number}             gas estimate\n   */\n  getGasEstimate: function (params, blockLimit) {\n    var constructor = this;\n    var web3 = this.web3;\n    return new Promise(function (accept) {\n      // Always prefer specified gas - this includes gas set by class_defaults\n      if (params.gas) return accept(params.gas);\n      if (!constructor.autoGas) return accept();\n      web3.eth.estimateGas(params).then(gas => {\n        const bestEstimate = utils.multiplyBigNumberByDecimal(utils.bigNumberify(gas), constructor.gasMultiplier); // Don't go over blockLimit\n\n        const limit = utils.bigNumberify(blockLimit);\n        bestEstimate.gte(limit) ? accept(limit.sub(1).toHexString()) : accept(bestEstimate.toHexString()); // We need to let txs that revert through.\n        // Often that's exactly what you are testing.\n      }).catch(() => accept());\n    });\n  },\n\n  /**\n   * Prepares simple wrapped calls by checking network and organizing the method inputs into\n   * objects web3 can consume.\n   * @param  {Object} constructor   TruffleContract constructor\n   * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.\n   * @param  {Array}  _arguments    Arguments passed to method invocation\n   * @return {Promise}              Resolves object w/ tx params disambiguated from arguments\n   */\n  prepareCall: function (constructor, methodABI, _arguments) {\n    var args = Array.prototype.slice.call(_arguments);\n    var params = utils.getTxParams.call(constructor, methodABI, args);\n    args = utils.convertToEthersBN(args);\n    return constructor.detectNetwork().then(() => {\n      return {\n        args: args,\n        params: params\n      };\n    });\n  },\n\n  /**\n   * Disambiguates between transaction parameter objects and BN / BigNumber objects\n   * @param  {Any}  arg\n   * @return {Boolean}\n   */\n  hasTxParams: function (arg) {\n    return utils.is_object(arg) && !utils.is_big_number(arg);\n  },\n\n  /**\n   * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`\n   * to execute a call at.\n   * @param  {Array}  args      `arguments` that were passed to method\n   * @param  {Any}    lastArg    terminal argument passed to method\n   * @param  {Array}  inputs     ABI segment defining method arguments\n   * @return {Boolean}           true if final argument is `defaultBlock`\n   */\n  hasDefaultBlock: function (args, lastArg, inputs) {\n    var hasDefaultBlock = !execute.hasTxParams(lastArg) && args.length > inputs.length;\n    var hasDefaultBlockWithParams = execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;\n    return hasDefaultBlock || hasDefaultBlockWithParams;\n  },\n  // -----------------------------------  Methods --------------------------------------------------\n\n  /**\n   * Executes method as .call and processes optional `defaultBlock` argument.\n   * @param  {Function} fn         method\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}             Return value of the call.\n   */\n  call: function (fn, methodABI, address) {\n    var constructor = this;\n    return function () {\n      var params = {};\n      var defaultBlock = \"latest\";\n      var args = Array.prototype.slice.call(arguments);\n      var lastArg = args[args.length - 1]; // Extract defaultBlock parameter\n\n      if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {\n        defaultBlock = args.pop();\n      } // Extract tx params\n\n\n      if (execute.hasTxParams(lastArg)) {\n        params = args.pop();\n      }\n\n      params.to = address;\n      params = utils.merge(constructor.class_defaults, params);\n      return new Promise(async (resolve, reject) => {\n        let result;\n\n        try {\n          await constructor.detectNetwork();\n          args = utils.convertToEthersBN(args);\n          result = await fn(...args).call(params, defaultBlock);\n          result = reformat.numbers.call(constructor, result, methodABI.outputs);\n          resolve(result);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    };\n  },\n\n  /**\n   * Executes method as .send\n   * @param  {Function} fn         Method to invoke\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @param  {String}   address    Deployed address of the targeted instance\n   * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)\n   */\n  send: function (fn, methodABI, address) {\n    var constructor = this;\n    var web3 = constructor.web3;\n    return function () {\n      var deferred;\n      var args = Array.prototype.slice.call(arguments);\n      var params = utils.getTxParams.call(constructor, methodABI, args);\n      var promiEvent = new Web3PromiEvent();\n      var context = {\n        contract: constructor,\n        // Can't name this field `constructor` or `_constructor`\n        promiEvent: promiEvent,\n        params: params\n      };\n      constructor.detectNetwork().then(network => {\n        args = utils.convertToEthersBN(args);\n        params.to = address;\n        params.data = fn ? fn(...args).encodeABI() : undefined;\n        execute.getGasEstimate.call(constructor, params, network.blockLimit).then(gas => {\n          params.gas = gas;\n          deferred = web3.eth.sendTransaction(params);\n          deferred.catch(override.start.bind(constructor, context));\n          handlers.setup(deferred, context);\n        }).catch(promiEvent.reject);\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Deploys an instance. Network detection for `.new` happens before invocation at `contract.js`\n   * where we check the libraries.\n   * @param  {Object} args            Deployment options;\n   * @param  {Object} context         Context object that exposes execution state to event handlers.\n   * @param  {Number} blockLimit      `block.gasLimit`\n   * @return {PromiEvent}             Resolves a TruffleContract instance\n   */\n  deploy: function (args, context, blockLimit) {\n    var constructor = this;\n    var abi = constructor.abi;\n    var constructorABI = constructor.abi.filter(i => i.type === \"constructor\")[0];\n    var web3 = constructor.web3;\n    var params = utils.getTxParams.call(constructor, constructorABI, args);\n    var deferred;\n    var options = {\n      data: constructor.binary,\n      arguments: utils.convertToEthersBN(args)\n    };\n    var contract = new web3.eth.Contract(abi);\n    params.data = contract.deploy(options).encodeABI();\n    execute.getGasEstimate.call(constructor, params, blockLimit).then(gas => {\n      params.gas = gas;\n      context.params = params;\n      deferred = web3.eth.sendTransaction(params);\n      handlers.setup(deferred, context);\n      deferred.then(async receipt => {\n        if (receipt.status !== undefined && !receipt.status) {\n          var reason = await Reason.get(params, web3);\n          var error = new StatusError(params, context.transactionHash, receipt, reason);\n          return context.promiEvent.reject(error);\n        }\n\n        var web3Instance = new web3.eth.Contract(abi, receipt.contractAddress);\n        web3Instance.transactionHash = context.transactionHash;\n        context.promiEvent.resolve(new constructor(web3Instance)); // Manage web3's 50 blocks' timeout error.\n        // Web3's own subscriptions go dead here.\n      }).catch(override.start.bind(constructor, context));\n    }).catch(context.promiEvent.reject);\n  },\n\n  /**\n   * Begins listening for an event OR manages the event callback\n   * @param  {Function} fn  Solidity event method\n   * @return {Emitter}      Event emitter\n   */\n  event: function (fn) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null; // Someone upstream is firing duplicates :/\n\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n\n    return function (params, callback) {\n      if (typeof params === \"function\") {\n        callback = params;\n        params = {};\n      } // As callback\n\n\n      if (callback !== undefined) {\n        var intermediary = function (err, e) {\n          if (err) return callback(err);\n          if (!dedupe(e.id)) return;\n          callback(null, decode.call(constructor, e, true)[0]);\n        };\n\n        return constructor.detectNetwork().then(() => fn.call(constructor.events, params, intermediary));\n      } // As EventEmitter\n\n\n      var emitter = new EventEmitter();\n      constructor.detectNetwork().then(() => {\n        var event = fn(params);\n        event.on(\"data\", e => dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]));\n        event.on(\"changed\", e => dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]));\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `allEvents`, with additional log decoding\n   * @return {PromiEvent}  EventEmitter\n   */\n  allEvents: function (web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null; // Someone upstream is firing duplicates :/\n\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n\n    return function (params) {\n      var emitter = new EventEmitter();\n      constructor.detectNetwork().then(() => {\n        var event = web3Instance.events.allEvents(params);\n        event.on(\"data\", e => dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]));\n        event.on(\"changed\", e => dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]));\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `getPastEvents`, with additional log decoding\n   * @return {Promise}  Resolves array of event objects\n   */\n  getPastEvents: function (web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    return function (event, options) {\n      return web3Instance.getPastEvents(event, options).then(events => decode.call(constructor, events, false));\n    };\n  },\n\n  /**\n   * Estimates gas cost of a method invocation\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  estimate: function (fn, methodABI) {\n    var constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(res => fn(...res.args).estimateGas(res.params));\n    };\n  },\n\n  /**\n   *\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  request: function (fn, methodABI) {\n    var constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(res => fn(...res.args).request(res.params));\n    };\n  },\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `estimate`\n  estimateDeployment: function () {\n    var constructor = this;\n    var constructorABI = constructor.abi.filter(i => i.type === \"constructor\")[0];\n    return execute.prepareCall(constructor, constructorABI, arguments).then(res => {\n      var options = {\n        data: constructor.binary,\n        arguments: res.args\n      };\n      delete res.params[\"data\"]; // Is this necessary?\n\n      var instance = new constructor.web3.eth.Contract(constructor.abi, res.params);\n      return instance.deploy(options).estimateGas(res.params);\n    });\n  }\n};\nmodule.exports = execute;","map":null,"metadata":{},"sourceType":"script"}