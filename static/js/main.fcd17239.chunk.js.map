{"version":3,"sources":["images/cover.jpg","images/Barcelona.png","images/Juventus.png","images/ManchesterUnited.png","images/RealMadrid.png","utils/getWeb3.js","TeamA.jsx","TeamB.jsx","TeamC.jsx","TeamD.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getWeb3","Promise","resolve","reject","window","addEventListener","results","web3","Web3","currentProvider","console","log","provider","providers","HttpProvider","TeamA","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Amount","InputAmount","weiConversion","getAmount","bind","assertThisInitialized","Bet","MakeWin","handleInputChange","_this2","then","eth","getAccounts","error","acc","setState","catch","BettingInstance","_this3","Betting","require","contract","BettingContract","setProvider","accounts","deployed","instance","result","AmountOne","from","e","target","value","_this4","bet","distributePrizes","react_default","a","createElement","src","Barcelona","alt","height","width","className","type","onChange","required","pattern","onClick","Component","TeamB","AmountTwo","Juventus","TeamC","ManchesterUnited","TeamD","RealMadrid","App","address","Container","class","cover","Row","Col","xs","sm","src_TeamA","src_TeamB","src_TeamC","src_TeamD","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fcd17239.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cover.39a23a21.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Barcelona.4f9754fa.png\";","module.exports = __webpack_public_path__ + \"static/media/Juventus.10e11d25.png\";","module.exports = __webpack_public_path__ + \"static/media/ManchesterUnited.a6b01604.png\";","module.exports = __webpack_public_path__ + \"static/media/RealMadrid.70efcbab.png\";","import Web3 from 'web3'\n\nlet getWeb3 = new Promise(function(resolve, reject) {\n  // Wait for loading completion before loading web3, to be sure it's\n  // already injected\n  window.addEventListener('load', function() {\n    var results\n    var web3 = window.web3\n    // Checking if Web3 has been injected by the browser MetaMask\n    if (typeof web3 !== 'undefined') {\n      // Use MetaMask's provider.\n      web3 = new Web3(web3.currentProvider)\nresults = {\n        web3: web3\n      }\n      console.log('Injected web3 detected.');\n      resolve(results)\n    } else {\n      // If no web3 is detected, then the local web3 provider is loaded.\n      var provider = new Web3.providers.HttpProvider('http://127.0.0.1:9545')\n      web3 = new Web3(provider)\n      results = {\n        web3: web3\n      }\n      console.log('No web3 instance injected, using Local web3.');\n      resolve(results)\n    }\n  })\n})\nexport default getWeb3","import React, { Component } from 'react';\nimport getWeb3 from './utils/getWeb3.js';\nimport BettingContract from './contracts/Betting.json';\nimport './App.css';\nimport Barcelona from './images/Barcelona.png';\n\n\nclass TeamA extends Component {\n  constructor(){\n    super();\n    this.state={\n      web3: '',\n      Amount: '',\n      InputAmount: '',\n      weiConversion : 1000000000000000000\n    }\n\n    this.getAmount = this.getAmount.bind(this);\n    this.Bet = this.Bet.bind(this);\n    this.MakeWin = this.MakeWin.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount(){\n    getWeb3.then(results => {\n      /*After getting web3, we save the informations of the web3 user by\n      editing the state variables of the component */\n      results.web3.eth.getAccounts( (error,acc) => {\n        //this.setState is used to edit the state variables\n        this.setState({\n          web3: results.web3\n        })\n      });\n      //At the end of the first promise, we return the loaded web3\n      return results.web3\n    }).then(results => {\n      //In the next promise, we pass web3 (in results) to the getAmount function\n      this.getAmount(results)\n    }).catch( () => {\n      //If no web3 provider was found, log it in the console\n      console.log('Error finding web3.')\n    })\n  }\n\n  getAmount(web3){\n    //Get the contract\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(web3.currentProvider);\n    var BettingInstance;\n    web3.eth.getAccounts((error, accounts) => {\n    Betting.deployed().then((instance) => {\n\n      //Instantiate the contract in a promise\n      BettingInstance = instance\n\n    }).then((result) => {\n      //Calling the AmountOne function of the smart-contract\n      return BettingInstance.AmountOne.call({from: accounts[0]})\n    }).then((result) => {\n      //Then the value returned is stored in the Amount state var.\n      //Divided by 10000 to convert in ether.\n      this.setState({\n        Amount : result / 1000000000000000000\n      })\n    });\n  })\n  }\n\n  handleInputChange(e) {\n    this.setState({InputAmount: e.target.value*this.state.weiConversion});\n  }\n\n  Bet(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          // Get the value from the contract to prove it worked.\n          return BettingInstance.bet(1, {from: accounts[0],\n          value: this.state.InputAmount})\n        }).catch(() => {\n          console.log(\"Error with betting\")\n        })\n      })\n  }\n\n  MakeWin(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          return BettingInstance.distributePrizes(1, {from: accounts[0]})\n        }).catch(() => {\n          console.log(\"Error with distributing prizes\")\n        })\n      })\n  }\n\n  render(){\n        return(\n            <div>\n              <img src={Barcelona} alt=\"Barcelona FC\" height=\"100\" width=\"100\" className=\"Team-logo\"/>\n              <h3>Barcelona FC</h3>\n              {console.log(this.state)}\n              <h4> Total amount : {this.state.Amount} ETH</h4>\n              <hr/>\n              <h5> Enter an amount to bet</h5>\n              <div className=\"input-group\">\n                      <input type=\"text\" className=\"form-control\" onChange={this.handleInputChange} required pattern=\"[0-9]*[.,][0-9]*\"/>\n                      <span className=\"input-group-addon\">ETH</span>\n              </div>\n              <br/>\n              <button onClick={this.Bet}>Bet</button>\n              <br/>\n              <hr/>\n              <button onClick={this.MakeWin}> Make this team win</button>\n            </div>\n        )\n    }\n\n}\n\nexport default TeamA;","import React, { Component } from 'react';\nimport getWeb3 from './utils/getWeb3.js';\nimport BettingContract from './contracts/Betting.json'\nimport './App.css';\nimport Juventus from './images/Juventus.png';\n\n\n\nclass TeamB extends Component {\n  constructor(){\n    super();\n    this.state={\n      web3: '',\n      Amount: '',\n      InputAmount: '',\n      weiConversion : 1000000000000000000\n    }\n\n    this.getAmount = this.getAmount.bind(this);\n    this.Bet = this.Bet.bind(this);\n    this.MakeWin = this.MakeWin.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount(){\n    getWeb3.then(results => {\n      /*After getting web3, we save the informations of the web3 user by\n      editing the state variables of the component */\n      results.web3.eth.getAccounts( (error,acc) => {\n        //this.setState is used to edit the state variables\n        this.setState({\n          web3: results.web3\n        })\n      });\n      return results.web3\n    }).then(results => {\n      this.getAmount(results)\n    }).catch( () => {\n      //If no web3 provider was found, log it in the console\n      console.log('Error finding web3.')\n    })\n  }\n\n  getAmount(web3){\n    //Get the contract\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(web3.currentProvider);\n    var BettingInstance;\n    web3.eth.getAccounts((error, accounts) => {\n    Betting.deployed().then((instance) => {\n\n      //Instanciate the contract in a promise\n      BettingInstance = instance\n\n    }).then((result) => {\n      //Calling the AmountOne function of the smart-contract\n      return BettingInstance.AmountTwo.call({from: accounts[0]})\n    }).then((result) => {\n      //Then the value returned is stored in the Amount state var.\n      //Divided by 10000 to convert in ether.\n      this.setState({\n        Amount : result / 1000000000000000000\n      })\n    });\n  })\n  }\n\n  handleInputChange(e) {\n    this.setState({InputAmount: e.target.value*this.state.weiConversion});\n  }\n\n  Bet(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          // Get the value from the contract to prove it worked.\n          return BettingInstance.bet(2, {from: accounts[0],\n          value: this.state.InputAmount})\n        }).catch(() => {\n          console.log(\"Error with betting\")\n        })\n      })\n  }\n\n  MakeWin(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          return BettingInstance.distributePrizes(2, {from: accounts[0]})\n        }).catch(() => {\n          console.log(\"Error with distributing prizes\")\n        })\n      })\n  }\n\n\n  render(){\n        return(\n          <div>\n            <img src={Juventus} alt=\"Juventus FC\" height=\"100\" width=\"100\" className=\"Team-logo\"/>\n            <h3>Juventus FC</h3>\n            <h4> Total amount : {this.state.Amount} ETH</h4>\n            <hr/>\n            <h5> Enter an amount to bet</h5>\n            <div className=\"input-group\">\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleInputChange} required pattern=\"[0-9]*[.,][0-9]*\"/>\n                    <span className=\"input-group-addon\">ETH</span>\n            </div>\n            <br/>\n            <button onClick={this.Bet}>Bet</button>\n            <br/>\n            <hr/>\n            <button onClick={this.MakeWin}> Make this team win</button>\n          </div>\n        )\n    }\n\n}\n\nexport default TeamB;","import React, { Component } from 'react';\nimport getWeb3 from './utils/getWeb3.js';\nimport BettingContract from './contracts/Betting2.json';\nimport './App.css';\nimport ManchesterUnited from './images/ManchesterUnited.png';\n\n\n\nclass TeamC extends Component {\n  constructor(){\n    super();\n    this.state={\n      web3: '',\n      Amount: '',\n      InputAmount: '',\n      weiConversion : 1000000000000000000\n    }\n\n    this.getAmount = this.getAmount.bind(this);\n    this.Bet = this.Bet.bind(this);\n    this.MakeWin = this.MakeWin.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount(){\n    getWeb3.then(results => {\n      /*After getting web3, we save the informations of the web3 user by\n      editing the state variables of the component */\n      results.web3.eth.getAccounts( (error,acc) => {\n        //this.setState is used to edit the state variables\n        this.setState({\n          web3: results.web3\n        })\n      });\n      //At the end of the first promise, we return the loaded web3\n      return results.web3\n    }).then(results => {\n      //In the next promise, we pass web3 (in results) to the getAmount function\n      this.getAmount(results)\n    }).catch( () => {\n      //If no web3 provider was found, log it in the console\n      console.log('Error finding web3.')\n    })\n  }\n\n  getAmount(web3){\n    //Get the contract\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(web3.currentProvider);\n    var BettingInstance;\n    web3.eth.getAccounts((error, accounts) => {\n    Betting.deployed().then((instance) => {\n\n      //Instantiate the contract in a promise\n      BettingInstance = instance\n\n    }).then((result) => {\n      //Calling the AmountOne function of the smart-contract\n      return BettingInstance.AmountOne.call({from: accounts[0]})\n    }).then((result) => {\n      //Then the value returned is stored in the Amount state var.\n      //Divided by 10000 to convert in ether.\n      this.setState({\n        Amount : result / 1000000000000000000\n      })\n    });\n  })\n  }\n\n  handleInputChange(e) {\n    this.setState({InputAmount: e.target.value*this.state.weiConversion});\n  }\n\n  Bet(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          // Get the value from the contract to prove it worked.\n          return BettingInstance.bet(1, {from: accounts[0],\n          value: this.state.InputAmount})\n        }).catch(() => {\n          console.log(\"Error with betting\")\n        })\n      })\n  }\n\n  MakeWin(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          return BettingInstance.distributePrizes(1, {from: accounts[0]})\n        }).catch(() => {\n          console.log(\"Error with distributing prizes\")\n        })\n      })\n  }\n\n\n  render(){\n        return(\n          <div>\n            <img src={ManchesterUnited} alt=\"Manchester United FC\" height=\"100\" width=\"100\" className=\"Team-logo\"/>\n            <h3>Manchester United FC</h3>\n            {console.log(this.state)}\n            <h4> Total amount : {this.state.Amount} ETH</h4>\n            <hr/>\n            <h5> Enter an amount to bet</h5>\n            <div className=\"input-group\">\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleInputChange} required pattern=\"[0-9]*[.,][0-9]*\"/>\n                    <span className=\"input-group-addon\">ETH</span>\n            </div>\n            <br/>\n            <button onClick={this.Bet}>Bet</button>\n            <br/>\n            <hr/>\n            <button onClick={this.MakeWin}> Make this team win</button>\n          </div>\n        )\n    }\n\n}\n\nexport default TeamC;","import React, { Component } from 'react';\nimport getWeb3 from './utils/getWeb3.js';\nimport BettingContract from './contracts/Betting2.json'\nimport './App.css';\nimport RealMadrid from './images/RealMadrid.png';\n\n\nclass TeamD extends Component {\n  constructor(){\n    super();\n    this.state={\n      web3: '',\n      Amount: '',\n      InputAmount: '',\n      weiConversion : 1000000000000000000\n    }\n\n    this.getAmount = this.getAmount.bind(this);\n    this.Bet = this.Bet.bind(this);\n    this.MakeWin = this.MakeWin.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount(){\n    getWeb3.then(results => {\n      /*After getting web3, we save the informations of the web3 user by\n      editing the state variables of the component */\n      results.web3.eth.getAccounts( (error,acc) => {\n        //this.setState is used to edit the state variables\n        this.setState({\n          web3: results.web3\n        })\n      });\n      return results.web3\n    }).then(results => {\n      this.getAmount(results)\n    }).catch( () => {\n      //If no web3 provider was found, log it in the console\n      console.log('Error finding web3.')\n    })\n  }\n\n  getAmount(web3){\n    //Get the contract\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(web3.currentProvider);\n    var BettingInstance;\n    web3.eth.getAccounts((error, accounts) => {\n    Betting.deployed().then((instance) => {\n\n      //Instanciate the contract in a promise\n      BettingInstance = instance\n\n    }).then((result) => {\n      //Calling the AmountOne function of the smart-contract\n      return BettingInstance.AmountTwo.call({from: accounts[0]})\n    }).then((result) => {\n      //Then the value returned is stored in the Amount state var.\n      //Divided by 10000 to convert in ether.\n      this.setState({\n        Amount : result / 1000000000000000000\n      })\n    });\n  })\n  }\n\n  handleInputChange(e) {\n    this.setState({InputAmount: e.target.value*this.state.weiConversion});\n  }\n\n  Bet(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          // Get the value from the contract to prove it worked.\n          return BettingInstance.bet(2, {from: accounts[0],\n          value: this.state.InputAmount})\n        }).catch(() => {\n          console.log(\"Error with betting\")\n        })\n      })\n  }\n\n  MakeWin(){\n    const contract = require('truffle-contract');\n    const Betting = contract(BettingContract);\n    Betting.setProvider(this.state.web3.currentProvider);\n    var BettingInstance;\n    this.state.web3.eth.getAccounts((error, accounts) => {\n        Betting.deployed().then((instance) => {\n          BettingInstance = instance\n        }).then((result) => {\n          return BettingInstance.distributePrizes(2, {from: accounts[0]})\n        }).catch(() => {\n          console.log(\"Error with distributing prizes\")\n        })\n      })\n  }\n\n\n  render(){\n        return(\n          <div>\n            <img src={RealMadrid} alt=\"Real Madrid FC\" height=\"100\" width=\"100\" className=\"Team-logo\"/>\n            <h3>Real Madrid FC</h3>\n            <h4> Total amount : {this.state.Amount} ETH</h4>\n            <hr/>\n            <h5> Enter an amount to bet</h5>\n            <div className=\"input-group\">\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleInputChange} required pattern=\"[0-9]*[.,][0-9]*\"/>\n                    <span className=\"input-group-addon\">ETH</span>\n            </div>\n            <br/>\n            <button onClick={this.Bet}>Bet</button>\n            <br/>\n            <hr/>\n            <button onClick={this.MakeWin}> Make this team win</button>\n          </div>\n        )\n    }\n\n}\n\nexport default TeamD;","import React, { Component } from 'react';\nimport cover from './images/cover.jpg';\nimport './App.css';\nimport getWeb3 from './utils/getWeb3.js';\nimport {Container,Row,Col} from 'react-bootstrap';\nimport TeamA from './TeamA.jsx';\nimport TeamB from './TeamB.jsx';\nimport TeamC from './TeamC.jsx';\nimport TeamD from './TeamD.jsx';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      web3 : '',\n      address: '',\n    };\n  }\n\ncomponentDidMount() {\n    getWeb3.then(results => {\n      /*After getting web3, we save the informations of the web3 user by\n      editing the state variables of the component */\n      results.web3.eth.getAccounts( (error,acc) => {\n        //this.setState is used to edit the state variables\n        this.setState({\n          address: acc[0],\n          web3: results.web3\n        })\n      });\n    }).catch( () => {\n      //If no web3 provider was found, log it in the console\n      console.log('Error finding web3.')\n    })\n  }\nrender() {\n    return (\n      <div className=\"App\">\n\n        <Container>\n          <div class=\"jumbotron\">\n            <img src={cover} alt=\"Sports-Beth\" />\n          </div>\n        </Container>\n        <Container>\n          <div class=\"jumbotron\">\n            <h2>Welcome to our Ethereum Sports predictions platform</h2>\n            <h4><hr/>Your Wallet address is {this.state.address}</h4>\n          </div>\n        </Container>\n\n        <Container>\n          <div class=\"jumbotron\">\n            <Row>\n              {/* we define the two columns. The bootstrap grid is divided by 12\n              parts so if we want two columns, they will take 6 parts each */}\n              <Col xs={4} sm={4}><TeamA /> {/*We will import Team A component here */}</Col>\n              <Col xs={4} sm={4} className=\"App-logo\"><h1><br/>VS</h1></Col>\n              <Col xs={4} sm={4}><TeamB /> {/*We will import Team B component here */}</Col>\n            </Row>\n          </div>\n          <div class=\"jumbotron\">\n            <Row>\n              {/* we define the two columns. The bootstrap grid is divided by 12\n              parts so if we want two columns, they will take 6 parts each */}\n              <Col xs={4} sm={4}><TeamC /> {/*We will import Team A component here */}</Col>\n              <Col xs={4} sm={4} className=\"App-logo\"><h1><br/>VS</h1></Col>\n              <Col xs={4} sm={4}><TeamD /> {/*We will import Team B component here */}</Col>\n            </Row>\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}